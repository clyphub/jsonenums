// generated by jsonenums -type=TestUnderscoreToSpace -prefix_to_drop=TestUnderscoreToSpace_ -underscore_to_space=true; DO NOT EDIT

package main

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

var (
	_TestUnderscoreToSpaceNameToValue = map[string]TestUnderscoreToSpace{
		"Foo":            TestUnderscoreToSpace_Foo,
		"FooBar":         TestUnderscoreToSpace_FooBar,
		"Foo Baz":        TestUnderscoreToSpace_Foo_Baz,
		"Foo Baz Qwerty": TestUnderscoreToSpace_Foo_Baz_Qwerty,
	}

	_TestUnderscoreToSpaceValueToName = map[TestUnderscoreToSpace]string{
		TestUnderscoreToSpace_Foo:            "Foo",
		TestUnderscoreToSpace_FooBar:         "FooBar",
		TestUnderscoreToSpace_Foo_Baz:        "Foo Baz",
		TestUnderscoreToSpace_Foo_Baz_Qwerty: "Foo Baz Qwerty",
	}
)

func init() {
	var v TestUnderscoreToSpace
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_TestUnderscoreToSpaceNameToValue = map[string]TestUnderscoreToSpace{
			interface{}(TestUnderscoreToSpace_Foo).(fmt.Stringer).String():            TestUnderscoreToSpace_Foo,
			interface{}(TestUnderscoreToSpace_FooBar).(fmt.Stringer).String():         TestUnderscoreToSpace_FooBar,
			interface{}(TestUnderscoreToSpace_Foo_Baz).(fmt.Stringer).String():        TestUnderscoreToSpace_Foo_Baz,
			interface{}(TestUnderscoreToSpace_Foo_Baz_Qwerty).(fmt.Stringer).String(): TestUnderscoreToSpace_Foo_Baz_Qwerty,
		}
	}
}

func ListTestUnderscoreToSpaceValues() map[string]string {
	TestUnderscoreToSpaceList := make(map[string]string)
	for k := range _TestUnderscoreToSpaceNameToValue {
		TestUnderscoreToSpaceList[k] = k
	}
	return TestUnderscoreToSpaceList
}

func (r TestUnderscoreToSpace) toString() (string, error) {
	s, ok := _TestUnderscoreToSpaceValueToName[r]
	if !ok {
		return "", fmt.Errorf("invalid TestUnderscoreToSpace: %d", r)
	}
	return s, nil
}

func (r TestUnderscoreToSpace) getString() (string, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return s.String(), nil
	}
	return r.toString()
}

func (r *TestUnderscoreToSpace) setValue(str string) error {
	v, ok := _TestUnderscoreToSpaceNameToValue[str]
	if !ok {
		return fmt.Errorf("invalid TestUnderscoreToSpace %q", str)
	}
	*r = v
	return nil
}

// MarshalJSON is generated so TestUnderscoreToSpace satisfies json.Marshaler.
func (r TestUnderscoreToSpace) MarshalJSON() ([]byte, error) {
	s, err := r.getString()
	if err != nil {
		return nil, err
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so TestUnderscoreToSpace satisfies json.Unmarshaler.
func (r *TestUnderscoreToSpace) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TestUnderscoreToSpace should be a string, got %s", data)
	}
	return r.setValue(s)
}

//Scan an input string into this structure for use with GORP
func (r *TestUnderscoreToSpace) Scan(i interface{}) error {
	switch t := i.(type) {
	case []byte:
		return r.setValue(string(t))
	case string:
		return r.setValue(t)
	default:
		return fmt.Errorf("Can't scan %T into type %T", i, r)
	}
}

func (r TestUnderscoreToSpace) Value() (driver.Value, error) {
	return r.getString()
}
