// generated by jsonenums -type=CustomStatus -prefix_to_drop=CustomStatus -all_caps -snake_case_json; DO NOT EDIT

package main

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

var (
	_CustomStatusNameToValue = map[string]CustomStatus{
		"ERROR":  CustomStatusError,
		"OK":     CustomStatusOK,
		"FUN":    CustomStatusFun,
		"NO_FUN": CustomStatusNoFun,
	}

	_CustomStatusValueToName = map[CustomStatus]string{
		CustomStatusError: "ERROR",
		CustomStatusOK:    "OK",
		CustomStatusFun:   "FUN",
		CustomStatusNoFun: "NO_FUN",
	}
)

type _CustomStatusInvalidValueError struct {
	invalidValue string
}

func (e _CustomStatusInvalidValueError) Error() string {
	return fmt.Sprintf("invalid CustomStatus: %s", e.invalidValue)
}

func (e _CustomStatusInvalidValueError) InvalidValueError() string {
	return e.Error()
}

func init() {
	var v CustomStatus
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_CustomStatusNameToValue = map[string]CustomStatus{
			interface{}(CustomStatusError).(fmt.Stringer).String(): CustomStatusError,
			interface{}(CustomStatusOK).(fmt.Stringer).String():    CustomStatusOK,
			interface{}(CustomStatusFun).(fmt.Stringer).String():   CustomStatusFun,
			interface{}(CustomStatusNoFun).(fmt.Stringer).String(): CustomStatusNoFun,
		}
	}
}

func ListCustomStatusValues() map[string]string {
	CustomStatusList := make(map[string]string)
	for k := range _CustomStatusNameToValue {
		CustomStatusList[k] = k
	}
	return CustomStatusList
}

func (r CustomStatus) toString() (string, error) {
	s, ok := _CustomStatusValueToName[r]
	if !ok {
		return "", fmt.Errorf("invalid CustomStatus: %d", r)
	}
	return s, nil
}

func (r CustomStatus) getString() (string, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return s.String(), nil
	}
	return r.toString()
}

func (r *CustomStatus) setValue(str string) error {
	v, ok := _CustomStatusNameToValue[str]
	if !ok {
		return fmt.Errorf("invalid CustomStatus %q", str)
	}
	*r = v
	return nil
}

// MarshalJSON is generated so CustomStatus satisfies json.Marshaler.
func (r CustomStatus) MarshalJSON() ([]byte, error) {
	s, err := r.getString()
	if err != nil {
		return nil, err
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so CustomStatus satisfies json.Unmarshaler.
func (r *CustomStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("CustomStatus should be a string, got %s", data)
	}
	return r.setValue(s)
}

//Scan an input string into this structure for use with GORP
func (r *CustomStatus) Scan(i interface{}) error {
	switch t := i.(type) {
	case []byte:
		return r.setValue(string(t))
	case string:
		return r.setValue(t)
	default:
		return fmt.Errorf("can't scan %T into type %T", i, r)
	}
}

func (r CustomStatus) Value() (driver.Value, error) {
	return r.getString()
}
